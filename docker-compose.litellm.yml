# LiteLLM Production Stack with Datadog Monitoring
# =================================================

version: '3.8'

services:
  # LiteLLM Proxy - Main API Gateway
  litellm-proxy:
    image: ghcr.io/berriai/litellm:main-latest
    container_name: litellm-proxy
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      # Database Configuration
      DATABASE_URL: "postgresql://litellm:litellm_password@litellm-postgres:5432/litellm"
      
      # Redis Configuration
      REDIS_HOST: "litellm-redis"
      REDIS_PORT: "6379"
      REDIS_PASSWORD: "litellm_redis_password"
      
      # LiteLLM Configuration
      LITELLM_MASTER_KEY: "${LITELLM_MASTER_KEY:-sk-vibecode-master-key-12345}"
      LITELLM_LOG_LEVEL: "INFO"
      LITELLM_REQUEST_TIMEOUT: "600"
      LITELLM_DROP_PARAMS: "true"
      LITELLM_SET_VERBOSE: "true"
      
      # Prometheus Metrics (for Datadog)
      LITELLM_PROMETHEUS: "true"
      LITELLM_PROMETHEUS_PORT: "4000"
      
      # Model Provider API Keys
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      ANTHROPIC_API_KEY: "${ANTHROPIC_API_KEY}"
      
      # Budget and Rate Limiting
      LITELLM_MAX_BUDGET: "${LITELLM_MAX_BUDGET:-1000}"
      LITELLM_BUDGET_DURATION: "${LITELLM_BUDGET_DURATION:-30d}"
      
      # Security
      LITELLM_SALT_KEY: "${LITELLM_SALT_KEY:-vibecode-salt-key-2025}"
      
      # Caching
      LITELLM_CACHE: "redis"
      LITELLM_CACHE_TTL: "3600"
      
      # Logging and Monitoring
      LITELLM_SUCCESS_CALLBACK: "prometheus,langfuse"
      LITELLM_FAILURE_CALLBACK: "prometheus,langfuse"
      
    volumes:
      - ./litellm/config.yaml:/app/config.yaml:ro
      - litellm-logs:/app/logs
    depends_on:
      - litellm-postgres
      - litellm-redis
    command: ["--config", "/app/config.yaml", "--port", "4000", "--num_workers", "4"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - litellm-network
    labels:
      - "com.datadoghq.ad.check_names=['litellm']"
      - "com.datadoghq.ad.init_configs=[{}]"
      - "com.datadoghq.ad.instances=[{'openmetrics_endpoint': 'http://%%host%%:4000/metrics'}]"
      - "com.datadoghq.ad.logs=[{'source': 'litellm', 'service': 'litellm-proxy'}]"

  # PostgreSQL Database for LiteLLM
  litellm-postgres:
    image: postgres:15-alpine
    container_name: litellm-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: litellm
      POSTGRES_USER: litellm
      POSTGRES_PASSWORD: litellm_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - litellm-postgres-data:/var/lib/postgresql/data
      - ./litellm/init-litellm-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U litellm -d litellm"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - litellm-network
    labels:
      - "com.datadoghq.ad.logs=[{'source': 'postgresql', 'service': 'litellm-postgres'}]"

  # Redis Cache for LiteLLM
  litellm-redis:
    image: redis:7-alpine
    container_name: litellm-redis
    restart: unless-stopped
    command: redis-server --requirepass litellm_redis_password --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6380:6379"
    volumes:
      - litellm-redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - litellm-network
    labels:
      - "com.datadoghq.ad.check_names=['redis']"
      - "com.datadoghq.ad.init_configs=[{}]"
      - "com.datadoghq.ad.instances=[{'host': '%%host%%', 'port': '6379', 'password': 'litellm_redis_password'}]"
      - "com.datadoghq.ad.logs=[{'source': 'redis', 'service': 'litellm-redis'}]"

  # LiteLLM UI for Management
  litellm-ui:
    image: ghcr.io/berriai/litellm-database:main-latest
    container_name: litellm-ui
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      DATABASE_URL: "postgresql://litellm:litellm_password@litellm-postgres:5432/litellm"
      LITELLM_MASTER_KEY: "${LITELLM_MASTER_KEY:-sk-vibecode-master-key-12345}"
      LITELLM_PROXY_BASE_URL: "http://litellm-proxy:4000"
    depends_on:
      - litellm-postgres
      - litellm-proxy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - litellm-network
    labels:
      - "com.datadoghq.ad.logs=[{'source': 'litellm-ui', 'service': 'litellm-ui'}]"

  # Datadog Agent for Monitoring
  datadog-agent:
    image: gcr.io/datadoghq/agent:latest
    container_name: litellm-datadog-agent
    restart: unless-stopped
    environment:
      DD_API_KEY: "${DD_API_KEY}"
      DD_SITE: "${DD_SITE:-datadoghq.com}"
      DD_HOSTNAME: "litellm-stack"
      DD_TAGS: "env:${ENVIRONMENT:-development} service:litellm project:vibecode"
      
      # Container monitoring
      DD_CONTAINER_EXCLUDE: "name:datadog-agent"
      DD_CONTAINER_INCLUDE: "name:litellm.*"
      
      # Logs collection
      DD_LOGS_ENABLED: "true"
      DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL: "true"
      DD_LOGS_CONFIG_AUTO_MULTI_LINE_DETECTION: "true"
      
      # Process monitoring
      DD_PROCESS_AGENT_ENABLED: "true"
      
      # APM
      DD_APM_ENABLED: "true"
      DD_APM_NON_LOCAL_TRAFFIC: "true"
      
      # Prometheus/OpenMetrics
      DD_PROMETHEUS_ENABLED: "true"
      DD_PROMETHEUS_CHECK_NAMES: '["litellm"]'
      
      # Network monitoring
      DD_SYSTEM_PROBE_ENABLED: "true"
      
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /opt/datadog-agent/run:/opt/datadog-agent/run:rw
      - ./monitoring/datadog/conf.d:/etc/datadog-agent/conf.d:ro
    networks:
      - litellm-network
    security_opt:
      - apparmor:unconfined
    cap_add:
      - SYS_ADMIN
      - SYS_RESOURCE
      - SYS_PTRACE
      - NET_BROADCAST
      - NET_ADMIN
      - IPC_LOCK

volumes:
  litellm-postgres-data:
    driver: local
  litellm-redis-data:
    driver: local
  litellm-logs:
    driver: local

networks:
  litellm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 
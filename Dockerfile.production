# Multi-stage Docker build for production deployment
# Optimized for size and security

# Build stage
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./
COPY next.config.js ./
COPY next.config.ts ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY src ./src
COPY public ./public
COPY .env.example ./

# Build the application
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
RUN npm run build

# Production stage
FROM node:18-alpine AS runner

# Security: Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

WORKDIR /app

# Copy built application
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# Create directories for uploads and data
RUN mkdir -p uploads rag-index conversations
RUN chown -R nextjs:nodejs uploads rag-index conversations

# Health check
COPY --from=builder /app/package.json ./
RUN echo '#!/bin/sh\ncurl -f http://localhost:3000/api/health || exit 1' > /health-check.sh
RUN chmod +x /health-check.sh

# Security hardening
RUN apk add --no-cache curl && \
    rm -rf /var/cache/apk/*

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV NODE_ENV=production
ENV HOSTNAME="0.0.0.0"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD /health-check.sh

# Start the application
CMD ["node", "server.js"]
// Placeholder build output for Docker testing
// This would be generated by the actual SvelteKit build process

import { createServer } from 'http';

const port = process.env.PORT || 3000;
const host = process.env.HOST || '0.0.0.0';

const server = createServer((req, res) => {
    // Basic health check endpoint
    if (req.url === '/health') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
            status: 'healthy',
            timestamp: new Date().toISOString(),
            uptime: process.uptime(),
            version: '1.0.0',
            service: 'vibecode-chat-ui'
        }));
        return;
    }

    // Default response
    res.writeHead(200, { 'Content-Type': 'text/html' });
    res.end(`
        <!DOCTYPE html>
        <html>
        <head>
            <title>VibeCode Chat-UI</title>
            <style>
                body { font-family: system-ui, sans-serif; margin: 0; padding: 2rem; background: #f8fafc; }
                .container { max-width: 600px; margin: 0 auto; background: white; padding: 2rem; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
                h1 { color: #1e40af; margin-bottom: 1rem; }
                .status { color: #059669; font-weight: 500; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>ðŸš€ VibeCode Chat-UI</h1>
                <p class="status">âœ… Service is running</p>
                <p>This is a placeholder for the Hugging Face Chat-UI implementation.</p>
                <p><strong>Port:</strong> ${port}</p>
                <p><strong>Environment:</strong> ${process.env.NODE_ENV || 'development'}</p>
                <p><strong>Uptime:</strong> ${Math.floor(process.uptime())} seconds</p>
                <hr>
                <p><small>Part of the VibeCode AI development platform</small></p>
            </div>
        </body>
        </html>
    `);
});

server.listen(port, host, () => {
    console.log(`ðŸš€ VibeCode Chat-UI server running on http://${host}:${port}`);
    console.log(`ðŸ“Š Health check available at http://${host}:${port}/health`);
});

// Graceful shutdown handling
process.on('SIGTERM', () => {
    console.log('ðŸ“´ Received SIGTERM, shutting down gracefully...');
    server.close(() => {
        console.log('âœ… Server closed');
        process.exit(0);
    });
});

process.on('SIGINT', () => {
    console.log('ðŸ“´ Received SIGINT, shutting down gracefully...');
    server.close(() => {
        console.log('âœ… Server closed');
        process.exit(0);
    });
});
# Multi-Architecture Docker Compose Configuration
# Optimized for development and testing across different platforms

version: '3.8'

services:
  vibecode-web:
    build:
      context: .
      dockerfile: Dockerfile.multiarch
      platforms:
        - linux/amd64
        - linux/arm64
      args:
        NODE_VERSION: 20
        ALPINE_VERSION: 3.20
      cache_from:
        - vibecode-web:cache
      cache_to:
        - type=inline
    image: vibecode-web:multiarch
    container_name: vibecode-web-multiarch
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=3000
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=1g
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Development dependencies for testing
  postgres:
    image: postgres:16-alpine
    container_name: vibecode-postgres-multiarch
    environment:
      POSTGRES_DB: vibecode
      POSTGRES_USER: vibecode
      POSTGRES_PASSWORD: vibecode_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  redis:
    image: redis:7-alpine
    container_name: vibecode-redis-multiarch
    ports:
      - "6379:6379"
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: vibecode-network
    driver: bridge
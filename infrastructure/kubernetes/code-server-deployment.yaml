apiVersion: apps/v1
kind: Deployment
metadata:
  name: code-server
  namespace: vibecode-webgui
  labels:
    app: code-server
    component: ide
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: code-server
  template:
    metadata:
      labels:
        app: code-server
        component: ide
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: code-server-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: code-server
        image: vibecode/code-server:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: code-server-secrets
              key: password
        - name: DOCKER_USER
          value: "coder"
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2
            memory: 4Gi
        volumeMounts:
        - name: workspace-storage
          mountPath: /home/coder/workspace
        - name: config-storage
          mountPath: /home/coder/.local/share/code-server
        - name: docker-sock
          mountPath: /var/run/docker.sock
          readOnly: true
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
            add:
            - CHOWN
            - SETUID
            - SETGID
          readOnlyRootFilesystem: false
      volumes:
      - name: workspace-storage
        persistentVolumeClaim:
          claimName: workspace-pvc
      - name: config-storage
        persistentVolumeClaim:
          claimName: config-pvc
      - name: docker-sock
        hostPath:
          path: /var/run/docker.sock
          type: Socket
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - code-server
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: code-server-service
  namespace: vibecode-webgui
  labels:
    app: code-server
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: code-server
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: code-server-sa
  namespace: vibecode-webgui
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: vibecode-webgui
  name: code-server-role
rules:
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: code-server-rolebinding
  namespace: vibecode-webgui
subjects:
- kind: ServiceAccount
  name: code-server-sa
  namespace: vibecode-webgui
roleRef:
  kind: Role
  name: code-server-role
  apiGroup: rbac.authorization.k8s.io
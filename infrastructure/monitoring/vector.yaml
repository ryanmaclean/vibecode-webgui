# Vector configuration for log aggregation and shipping to Datadog
# Vector is a high-performance observability data pipeline

api:
  enabled: true
  address: "0.0.0.0:8686"
  playground: true

# Sources - where Vector collects data from
sources:
  # Kubernetes pod logs
  kubernetes_logs:
    type: "kubernetes_logs"
    include_container_names:
      - "vibecode-webgui"
      - "code-server"
      - "redis"
      - "postgres"
    exclude_container_names:
      - "vector"
      - "datadog-agent"
    annotation_fields:
      container_image: "kubernetes.container_image"
      container_name: "kubernetes.container_name"
      pod_name: "kubernetes.pod_name"
      pod_namespace: "kubernetes.pod_namespace"
      pod_uid: "kubernetes.pod_uid"

  # Application logs from files
  app_logs:
    type: "file"
    include:
      - "/var/log/vibecode/*.log"
      - "/app/logs/*.log"
    exclude:
      - "*.gz"
    read_from: "beginning"
    fingerprint:
      strategy: "device_and_inode"
    multiline:
      start_pattern: '^(\d{4}-\d{2}-\d{2}|\{)'
      mode: "halt_before"
      condition_pattern: '^(\d{4}-\d{2}-\d{2}|\{)'
      timeout_ms: 1000

  # System metrics
  host_metrics:
    type: "host_metrics"
    collectors:
      - "cpu"
      - "disk"
      - "filesystem"
      - "load"
      - "host"
      - "memory"
      - "network"
    scrape_interval_secs: 30
    namespace: "vibecode.host"

  # Docker container metrics
  docker_metrics:
    type: "docker_logs"
    include_containers:
      - "vibecode-webgui"
      - "code-server"
    exclude_containers:
      - "vector"

  # HTTP metrics from application
  internal_metrics:
    type: "internal_metrics"
    namespace: "vector"

# Transforms - data processing and enrichment
transforms:
  # Parse application JSON logs
  parse_app_logs:
    type: "json_parser"
    inputs: ["app_logs"]
    field: "message"
    drop_invalid: false

  # Parse Kubernetes logs
  parse_k8s_logs:
    type: "json_parser"
    inputs: ["kubernetes_logs"]
    field: "message"
    drop_invalid: false

  # Add common fields to all logs
  enrich_logs:
    type: "remap"
    inputs: ["parse_app_logs", "parse_k8s_logs"]
    source: |
      .service = "vibecode-webgui"
      .environment = get_env_var("ENVIRONMENT") ?? "production"
      .version = get_env_var("APP_VERSION") ?? "1.0.0"
      .cluster = get_env_var("CLUSTER_NAME") ?? "vibecode-cluster"

      # Extract and normalize log levels
      if exists(.level) {
        .level = downcase(string!(.level))
      } else if exists(.severity) {
        .level = downcase(string!(.severity))
      } else {
        .level = "info"
      }

      # Add workspace context if available
      if exists(.workspaceId) {
        .workspace_id = .workspaceId
      }

      # Add user context if available
      if exists(.userId) {
        .user_id = .userId
      }

      # Sanitize sensitive data
      if exists(.message) {
        .message = replace(string!(.message), r'password[=:]\s*\S+', "password=***")
        .message = replace(string!(.message), r'token[=:]\s*\S+', "token=***")
        .message = replace(string!(.message), r'key[=:]\s*\S+', "key=***")
      }

  # Process metrics
  enrich_metrics:
    type: "remap"
    inputs: ["host_metrics", "docker_metrics", "internal_metrics"]
    source: |
      .service = "vibecode-webgui"
      .environment = get_env_var("ENVIRONMENT") ?? "production"
      .cluster = get_env_var("CLUSTER_NAME") ?? "vibecode-cluster"
      .host = get_hostname!()

  # Filter out noisy logs
  filter_logs:
    type: "filter"
    inputs: ["enrich_logs"]
    condition: |
      !includes(string!(.message), "health-check") &&
      !includes(string!(.message), "favicon.ico") &&
      .level != "debug" || get_env_var("LOG_LEVEL") == "debug"

# Sinks - where Vector sends data
sinks:
  # Send logs to Datadog
  datadog_logs:
    type: "datadog_logs"
    inputs: ["filter_logs"]
    default_api_key: "${DD_API_KEY}"
    site: "${DD_SITE:-datadoghq.com}"
    compression: "gzip"
    batch:
      max_events: 1000
      timeout_secs: 5
    request:
      retry_attempts: 3
      retry_initial_backoff_secs: 1
      retry_max_duration_secs: 60
      timeout_secs: 30
    acknowledgements:
      enabled: true

  # Send metrics to Datadog
  datadog_metrics:
    type: "datadog_metrics"
    inputs: ["enrich_metrics"]
    default_api_key: "${DD_API_KEY}"
    site: "${DD_SITE:-datadoghq.com}"
    batch:
      max_events: 1000
      timeout_secs: 10
    request:
      retry_attempts: 3
      retry_initial_backoff_secs: 1
      retry_max_duration_secs: 60

  # Console output for debugging (disable in production)
  console_debug:
    type: "console"
    inputs: ["filter_logs"]
    encoding:
      codec: "json"
    healthcheck:
      enabled: false
    # Only enable in development
    enabled: false

  # Backup to local files
  file_backup:
    type: "file"
    inputs: ["filter_logs"]
    path: "/var/log/vector/backup-%Y-%m-%d.log"
    encoding:
      codec: "json"
    batch:
      max_size: 10485760  # 10MB
    compression: "gzip"

# Health checks and monitoring
health_checks:
  enabled: true
  require_healthy: false

# Global configuration
global:
  # Data directory for Vector's state
  data_dir: "/var/lib/vector"

  # Log level for Vector itself
  log_level: "info"

  # Timezone
  timezone: "UTC"

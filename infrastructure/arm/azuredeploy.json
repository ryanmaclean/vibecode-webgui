{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "description": "Deploy VibeCode WebGUI platform on Azure with AKS, PostgreSQL, AI Services, and monitoring",
    "author": "VibeCode Team"
  },
  "parameters": {
    "projectName": {
      "type": "string",
      "defaultValue": "vibecode",
      "minLength": 3,
      "maxLength": 20,
      "metadata": {
        "description": "Project name used for resource naming"
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "prod",
      "allowedValues": [
        "dev",
        "staging",
        "prod"
      ],
      "metadata": {
        "description": "Environment name"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure region for all resources"
      }
    },
    "administratorLogin": {
      "type": "string",
      "defaultValue": "vibecodeusr",
      "metadata": {
        "description": "PostgreSQL administrator login"
      }
    },
    "administratorPassword": {
      "type": "securestring",
      "minLength": 8,
      "metadata": {
        "description": "PostgreSQL administrator password (minimum 8 characters)"
      }
    },
    "datadogApiKey": {
      "type": "securestring",
      "metadata": {
        "description": "Datadog API key for monitoring integration"
      }
    },
    "datadogAppKey": {
      "type": "securestring",
      "metadata": {
        "description": "Datadog application key for monitoring integration"
      }
    },
    "aksKubernetesVersion": {
      "type": "string",
      "defaultValue": "1.28",
      "metadata": {
        "description": "Kubernetes version for AKS cluster"
      }
    },
    "aksSystemNodeCount": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 10,
      "metadata": {
        "description": "Number of system nodes in AKS cluster"
      }
    },
    "aksUserNodeCount": {
      "type": "int",
      "defaultValue": 3,
      "minValue": 1,
      "maxValue": 20,
      "metadata": {
        "description": "Initial number of user nodes in AKS cluster"
      }
    },
    "postgresqlSkuName": {
      "type": "string",
      "defaultValue": "GP_Standard_D4s_v3",
      "allowedValues": [
        "GP_Standard_D2s_v3",
        "GP_Standard_D4s_v3",
        "GP_Standard_D8s_v3",
        "GP_Standard_D16s_v3"
      ],
      "metadata": {
        "description": "PostgreSQL server SKU"
      }
    },
    "postgresqlStorageGB": {
      "type": "int",
      "defaultValue": 64,
      "minValue": 32,
      "maxValue": 1024,
      "metadata": {
        "description": "PostgreSQL storage size in GB"
      }
    },
    "enableHighAvailability": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable PostgreSQL high availability"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {
        "Project": "VibeCode",
        "Environment": "[parameters('environment')]",
        "DeployedBy": "ARM Template"
      },
      "metadata": {
        "description": "Tags to apply to all resources"
      }
    }
  },
  "variables": {
    "resourcePrefix": "[concat(parameters('projectName'), '-', parameters('environment'))]",
    "vnetName": "[concat(variables('resourcePrefix'), '-vnet')]",
    "aksSubnetName": "aks-subnet",
    "dbSubnetName": "db-subnet",
    "aksClusterName": "[concat(variables('resourcePrefix'), '-aks')]",
    "postgresServerName": "[concat(variables('resourcePrefix'), '-postgresql')]",
    "keyVaultName": "[concat(variables('resourcePrefix'), '-kv-', uniqueString(resourceGroup().id))]",
    "acrName": "[concat(replace(variables('resourcePrefix'), '-', ''), 'acr', uniqueString(resourceGroup().id))]",
    "logAnalyticsName": "[concat(variables('resourcePrefix'), '-logs')]",
    "aiServicesName": "[concat(variables('resourcePrefix'), '-ai')]",
    "openaiName": "[concat(variables('resourcePrefix'), '-openai')]",
    "computerVisionName": "[concat(variables('resourcePrefix'), '-cv')]",
    "languageServiceName": "[concat(variables('resourcePrefix'), '-lang')]",
    "managedIdentityName": "[concat(variables('resourcePrefix'), '-identity')]",
    "postgresqlStorageMB": "[mul(parameters('postgresqlStorageGB'), 1024)]"
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('managedIdentityName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]"
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-09-01",
      "name": "[variables('vnetName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "[variables('aksSubnetName')]",
            "properties": {
              "addressPrefix": "10.0.1.0/24",
              "delegations": [],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "[variables('dbSubnetName')]",
            "properties": {
              "addressPrefix": "10.0.2.0/24",
              "delegations": [
                {
                  "name": "Microsoft.DBforPostgreSQL/flexibleServers",
                  "properties": {
                    "serviceName": "Microsoft.DBforPostgreSQL/flexibleServers"
                  }
                }
              ],
              "privateEndpointNetworkPolicies": "Enabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2023-09-01",
      "name": "[variables('logAnalyticsName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30,
        "features": {
          "enableLogAccessUsingOnlyResourcePermissions": true
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]"
      ],
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))).principalId]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          }
        ],
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 90,
        "enableRbacAuthorization": true
      }
    },
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2023-07-01",
      "name": "[variables('acrName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "Premium"
      },
      "properties": {
        "adminUserEnabled": false,
        "policies": {
          "quarantinePolicy": {
            "status": "enabled"
          },
          "trustPolicy": {
            "type": "Notary",
            "status": "enabled"
          },
          "retentionPolicy": {
            "days": 30,
            "status": "enabled"
          }
        },
        "encryption": {
          "status": "disabled"
        },
        "dataEndpointEnabled": false,
        "publicNetworkAccess": "Enabled",
        "networkRuleBypassOptions": "AzureServices"
      }
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "privatelink.postgres.database.azure.com",
      "location": "global",
      "tags": "[parameters('tags')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[concat('privatelink.postgres.database.azure.com', '/', variables('vnetName'), '-link')]",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.postgres.database.azure.com')]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ],
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
        }
      }
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers",
      "apiVersion": "2023-06-01-preview",
      "name": "[variables('postgresServerName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
        "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.postgres.database.azure.com')]",
        "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', 'privatelink.postgres.database.azure.com', concat(variables('vnetName'), '-link'))]"
      ],
      "sku": {
        "name": "[parameters('postgresqlSkuName')]",
        "tier": "GeneralPurpose"
      },
      "properties": {
        "version": "16",
        "administratorLogin": "[parameters('administratorLogin')]",
        "administratorLoginPassword": "[parameters('administratorPassword')]",
        "storage": {
          "storageSizeGB": "[parameters('postgresqlStorageGB')]",
          "iops": 3000,
          "autoGrow": "Enabled"
        },
        "backup": {
          "backupRetentionDays": 35,
          "geoRedundantBackup": "[if(parameters('enableHighAvailability'), 'Enabled', 'Disabled')]"
        },
        "highAvailability": {
          "mode": "[if(parameters('enableHighAvailability'), 'ZoneRedundant', 'Disabled')]"
        },
        "network": {
          "delegatedSubnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('dbSubnetName'))]",
          "privateDnsZoneArmResourceId": "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.postgres.database.azure.com')]"
        }
      }
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers/configurations",
      "apiVersion": "2023-06-01-preview",
      "name": "[concat(variables('postgresServerName'), '/shared_preload_libraries')]",
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', variables('postgresServerName'))]"
      ],
      "properties": {
        "value": "vector",
        "source": "user-override"
      }
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
      "apiVersion": "2023-06-01-preview",
      "name": "[concat(variables('postgresServerName'), '/', parameters('projectName'), '_', parameters('environment'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', variables('postgresServerName'))]",
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers/configurations', variables('postgresServerName'), 'shared_preload_libraries')]"
      ],
      "properties": {
        "charset": "UTF8",
        "collation": "en_US.utf8"
      }
    },
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2023-05-01",
      "name": "[variables('openaiName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "kind": "OpenAI",
      "sku": {
        "name": "S0"
      },
      "properties": {
        "customSubDomainName": "[variables('openaiName')]",
        "networkAcls": {
          "defaultAction": "Allow"
        },
        "publicNetworkAccess": "Enabled"
      }
    },
    {
      "type": "Microsoft.CognitiveServices/accounts/deployments",
      "apiVersion": "2023-05-01",
      "name": "[concat(variables('openaiName'), '/gpt-4-turbo')]",
      "dependsOn": [
        "[resourceId('Microsoft.CognitiveServices/accounts', variables('openaiName'))]"
      ],
      "sku": {
        "name": "Standard",
        "capacity": 30
      },
      "properties": {
        "model": {
          "format": "OpenAI",
          "name": "gpt-4",
          "version": "turbo-2024-04-09"
        }
      }
    },
    {
      "type": "Microsoft.CognitiveServices/accounts/deployments",
      "apiVersion": "2023-05-01",
      "name": "[concat(variables('openaiName'), '/gpt-35-turbo')]",
      "dependsOn": [
        "[resourceId('Microsoft.CognitiveServices/accounts', variables('openaiName'))]",
        "[resourceId('Microsoft.CognitiveServices/accounts/deployments', variables('openaiName'), 'gpt-4-turbo')]"
      ],
      "sku": {
        "name": "Standard",
        "capacity": 120
      },
      "properties": {
        "model": {
          "format": "OpenAI",
          "name": "gpt-35-turbo",
          "version": "0613"
        }
      }
    },
    {
      "type": "Microsoft.CognitiveServices/accounts/deployments",
      "apiVersion": "2023-05-01",
      "name": "[concat(variables('openaiName'), '/text-embedding-ada-002')]",
      "dependsOn": [
        "[resourceId('Microsoft.CognitiveServices/accounts', variables('openaiName'))]",
        "[resourceId('Microsoft.CognitiveServices/accounts/deployments', variables('openaiName'), 'gpt-35-turbo')]"
      ],
      "sku": {
        "name": "Standard",
        "capacity": 120
      },
      "properties": {
        "model": {
          "format": "OpenAI",
          "name": "text-embedding-ada-002",
          "version": "2"
        }
      }
    },
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2023-05-01",
      "name": "[variables('computerVisionName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "kind": "ComputerVision",
      "sku": {
        "name": "S1"
      },
      "properties": {
        "customSubDomainName": "[variables('computerVisionName')]",
        "networkAcls": {
          "defaultAction": "Allow"
        },
        "publicNetworkAccess": "Enabled"
      }
    },
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2023-05-01",
      "name": "[variables('languageServiceName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "kind": "TextAnalytics",
      "sku": {
        "name": "S"
      },
      "properties": {
        "customSubDomainName": "[variables('languageServiceName')]",
        "networkAcls": {
          "defaultAction": "Allow"
        },
        "publicNetworkAccess": "Enabled"
      }
    },
    {
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2023-10-01",
      "name": "[variables('aksClusterName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]"
      ],
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]": {}
        }
      },
      "properties": {
        "kubernetesVersion": "[parameters('aksKubernetesVersion')]",
        "dnsPrefix": "[variables('aksClusterName')]",
        "agentPoolProfiles": [
          {
            "name": "system",
            "count": "[parameters('aksSystemNodeCount')]",
            "vmSize": "Standard_D4s_v3",
            "mode": "System",
            "vnetSubnetID": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('aksSubnetName'))]",
            "maxPods": 30,
            "osType": "Linux",
            "osSKU": "Ubuntu",
            "nodeTaints": [
              "CriticalAddonsOnly=true:NoSchedule"
            ]
          },
          {
            "name": "user",
            "count": "[parameters('aksUserNodeCount')]",
            "vmSize": "Standard_D8s_v3",
            "mode": "User",
            "vnetSubnetID": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('aksSubnetName'))]",
            "maxPods": 30,
            "osType": "Linux",
            "osSKU": "Ubuntu",
            "enableAutoScaling": true,
            "minCount": 1,
            "maxCount": 10
          }
        ],
        "servicePrincipalProfile": {
          "clientId": "msi"
        },
        "addonProfiles": {
          "omsAgent": {
            "enabled": true,
            "config": {
              "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
            }
          },
          "azureKeyvaultSecretsProvider": {
            "enabled": true,
            "config": {
              "enableSecretRotation": "true"
            }
          }
        },
        "enableRBAC": true,
        "networkProfile": {
          "networkPlugin": "azure",
          "networkPolicy": "calico",
          "serviceCidr": "172.16.0.0/16",
          "dnsServiceIP": "172.16.0.10",
          "dockerBridgeCidr": "172.17.0.1/16"
        },
        "autoUpgradeProfile": {
          "upgradeChannel": "patch"
        },
        "disableLocalAccounts": false,
        "securityProfile": {
          "workloadIdentity": {
            "enabled": true
          }
        },
        "oidcIssuerProfile": {
          "enabled": true
        }
      }
    }
  ],
  "outputs": {
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "aksClusterName": {
      "type": "string",
      "value": "[variables('aksClusterName')]"
    },
    "aksClusterFQDN": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksClusterName'))).fqdn]"
    },
    "postgresqlServerName": {
      "type": "string",
      "value": "[variables('postgresServerName')]"
    },
    "postgresqlFQDN": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', variables('postgresServerName'))).fullyQualifiedDomainName]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVaultName')]"
    },
    "containerRegistryName": {
      "type": "string",
      "value": "[variables('acrName')]"
    },
    "containerRegistryLoginServer": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))).loginServer]"
    },
    "openaiEndpoint": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('openaiName'))).endpoint]"
    },
    "computerVisionEndpoint": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('computerVisionName'))).endpoint]"
    },
    "languageServiceEndpoint": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('languageServiceName'))).endpoint]"
    },
    "managedIdentityClientId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))).clientId]"
    },
    "logAnalyticsWorkspaceId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))).customerId]"
    }
  }
} 
#!/bin/bash
# VibeCode Security Setup Script
# This script helps set up proper secrets management for the platform

set -e

echo "🔐 VibeCode Security Setup"
echo "=========================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if kubectl is available
if ! command -v kubectl &> /dev/null; then
    echo -e "${RED}❌ kubectl is not installed or not in PATH${NC}"
    echo "Please install kubectl and ensure it's configured"
    exit 1
fi

# Check if KIND cluster is running
if ! kubectl cluster-info &> /dev/null; then
    echo -e "${YELLOW}⚠️  No Kubernetes cluster detected${NC}"
    echo "Creating KIND cluster for development..."
    
    # Check if kind is available
    if ! command -v kind &> /dev/null; then
        echo -e "${RED}❌ KIND is not installed${NC}"
        echo "Please install KIND: https://kind.sigs.k8s.io/docs/user/quick-start/#installation"
        exit 1
    fi
    
    # Create KIND cluster
    kind create cluster --name vibecode-dev --config k8s/kind-config.yaml
    echo -e "${GREEN}✅ KIND cluster created${NC}"
fi

echo -e "${BLUE}📋 Setting up namespaces...${NC}"

# Create required namespaces
kubectl create namespace vibecode-platform --dry-run=client -o yaml | kubectl apply -f -
kubectl create namespace datadog --dry-run=client -o yaml | kubectl apply -f -
kubectl create namespace authelia --dry-run=client -o yaml | kubectl apply -f -
kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -

echo -e "${GREEN}✅ Namespaces created${NC}"

echo -e "${BLUE}🔑 Setting up secrets...${NC}"

# Function to prompt for secret if not in environment
prompt_for_secret() {
    local var_name=$1
    local prompt_text=$2
    local current_value="${!var_name}"
    
    if [[ -z "$current_value" ]]; then
        echo -e "${YELLOW}Please enter $prompt_text:${NC}"
        read -s input_value
        export $var_name="$input_value"
    fi
}

# Prompt for required secrets
prompt_for_secret "DD_API_KEY" "your Datadog API key"
prompt_for_secret "OPENROUTER_API_KEY" "your OpenRouter API key"
prompt_for_secret "CLAUDE_API_KEY" "your Claude API key (or press enter to skip)"

# Generate random secrets
echo -e "${BLUE}🎲 Generating random secrets...${NC}"
DD_CLUSTER_AGENT_TOKEN=$(openssl rand -base64 32 | tr -d '\n')
JWT_SECRET=$(openssl rand -base64 32 | tr -d '\n')
SESSION_SECRET=$(openssl rand -base64 32 | tr -d '\n')
NEXTAUTH_SECRET=$(openssl rand -base64 32 | tr -d '\n')

# Create Datadog secrets
echo -e "${BLUE}📊 Creating Datadog secrets...${NC}"
kubectl create secret generic datadog-secret \
    --from-literal=api-key="$DD_API_KEY" \
    --namespace=datadog \
    --dry-run=client -o yaml | kubectl apply -f -

kubectl create secret generic datadog-cluster-agent-secret \
    --from-literal=token="$DD_CLUSTER_AGENT_TOKEN" \
    --namespace=datadog \
    --dry-run=client -o yaml | kubectl apply -f -

# Create AI integration secrets
echo -e "${BLUE}🤖 Creating AI integration secrets...${NC}"
kubectl create secret generic ai-gateway-secret \
    --from-literal=openrouter-api-key="$OPENROUTER_API_KEY" \
    --from-literal=claude-api-key="${CLAUDE_API_KEY:-}" \
    --namespace=vibecode-platform \
    --dry-run=client -o yaml | kubectl apply -f -

# Create authentication secrets
echo -e "${BLUE}🔐 Creating authentication secrets...${NC}"
kubectl create secret generic auth-secrets \
    --from-literal=jwt-secret="$JWT_SECRET" \
    --from-literal=session-secret="$SESSION_SECRET" \
    --from-literal=nextauth-secret="$NEXTAUTH_SECRET" \
    --namespace=vibecode-platform \
    --dry-run=client -o yaml | kubectl apply -f -

# Create local .env.local file
echo -e "${BLUE}📝 Creating local environment file...${NC}"
cat > .env.local << EOF
# VibeCode Local Development Environment
# Generated by security-setup.sh

# Datadog Configuration
DD_API_KEY=$DD_API_KEY
DD_SITE=datadoghq.com
DD_ENV=development
DD_SERVICE=vibecode-webgui
DD_VERSION=1.0.0

# AI Integration
OPENROUTER_API_KEY=$OPENROUTER_API_KEY
CLAUDE_API_KEY=${CLAUDE_API_KEY:-}

# Authentication
JWT_SECRET=$JWT_SECRET
SESSION_SECRET=$SESSION_SECRET
NEXTAUTH_SECRET=$NEXTAUTH_SECRET
NEXTAUTH_URL=http://localhost:3000

# Database
DATABASE_URL=postgresql://vibecode:vibecode123@localhost:5432/vibecode_dev
REDIS_URL=redis://localhost:6379

# Development
NODE_ENV=development
PORT=3000
VITE_PORT=5173
ENABLE_DEBUG_LOGGING=true
ENABLE_DATADOG_INTEGRATION_TESTS=false

# Kubernetes
KUBECONFIG=$HOME/.kube/config
KUBERNETES_NAMESPACE=vibecode-platform
PLATFORM_DOMAIN=vibecode.dev
EOF

# Add .env.local to .gitignore if not already there
if ! grep -q ".env.local" .gitignore 2>/dev/null; then
    echo ".env.local" >> .gitignore
    echo -e "${GREEN}✅ Added .env.local to .gitignore${NC}"
fi

echo -e "${GREEN}🎉 Security setup complete!${NC}"
echo ""
echo -e "${BLUE}📋 Summary:${NC}"
echo -e "  ✅ Kubernetes namespaces created"
echo -e "  ✅ Datadog secrets configured"
echo -e "  ✅ AI integration secrets configured"
echo -e "  ✅ Authentication secrets configured"
echo -e "  ✅ Local .env.local file created"
echo -e "  ✅ Secrets excluded from version control"
echo ""
echo -e "${YELLOW}⚠️  Next steps:${NC}"
echo -e "  1. Review the .env.local file and update any missing values"
echo -e "  2. Run: kubectl get secrets --all-namespaces to verify secrets are created"
echo -e "  3. Deploy the monitoring stack: helm install datadog-agent datadog/datadog --values datadog-values.yaml"
echo -e "  4. Start the development environment: npm run dev"
echo ""
echo -e "${BLUE}🔗 Useful commands:${NC}"
echo -e "  kubectl get secrets -n datadog"
echo -e "  kubectl get secrets -n vibecode-platform"
echo -e "  kubectl describe secret datadog-secret -n datadog"
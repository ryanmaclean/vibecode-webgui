# External Secrets Operator Configuration for Datadog
# Enterprise-grade secrets management using external providers
# Supports AWS Secrets Manager, HashiCorp Vault, Azure Key Vault, etc.

apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vibecode-secret-store
  namespace: vibecode-dev
  labels:
    app.kubernetes.io/name: vibecode-secret-store
    app.kubernetes.io/component: external-secrets
    app.kubernetes.io/part-of: vibecode-platform
spec:
  # Example: AWS Secrets Manager configuration
  # Uncomment and configure based on your external provider
  
  # provider:
  #   aws:
  #     service: SecretsManager
  #     region: us-west-2
  #     auth:
  #       serviceAccount:
  #         name: external-secrets-sa
  
  # Example: HashiCorp Vault configuration
  # provider:
  #   vault:
  #     server: "https://vault.example.com"
  #     path: "secret"
  #     version: "v2"
  #     auth:
  #       kubernetes:
  #         mountPath: "kubernetes"
  #         role: "external-secrets-role"
  #         serviceAccountRef:
  #           name: external-secrets-sa
  
  # Example: Azure Key Vault configuration
  # provider:
  #   azurekv:
  #     vaultUrl: "https://vault.vault.azure.net"
  #     authType: WorkloadIdentity
  #     serviceAccountRef:
  #       name: external-secrets-sa

  # Example: Local Kubernetes secret for development/testing
  provider:
    kubernetes:
      server:
        caProvider:
          type: ConfigMap
          name: kube-root-ca.crt
          key: ca.crt
      auth:
        serviceAccount:
          name: external-secrets-sa

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: datadog-secrets-external
  namespace: vibecode-dev
  labels:
    app.kubernetes.io/name: datadog-secrets
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: vibecode-platform
spec:
  refreshInterval: 1h  # Refresh secrets every hour
  secretStoreRef:
    name: vibecode-secret-store
    kind: SecretStore
  
  target:
    name: datadog-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: datadog-secrets
          app.kubernetes.io/component: monitoring
          app.kubernetes.io/managed-by: external-secrets-operator
        annotations:
          reloader.stakater.com/match: "true"  # Auto-reload pods when secret changes
      data:
        api-key: "{{ .ddApiKey }}"
  
  data:
  - secretKey: ddApiKey
    remoteRef:
      key: datadog/api-key  # Path in external secret store
      property: value       # Property within the secret (if JSON)
  
  # Alternative: Multiple properties from single secret
  # - secretKey: ddApiKey
  #   remoteRef:
  #     key: vibecode/datadog
  #     property: api-key

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: postgres-credentials-external
  namespace: vibecode-dev
  labels:
    app.kubernetes.io/name: postgres-credentials
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: vibecode-platform
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vibecode-secret-store
    kind: SecretStore
  
  target:
    name: postgres-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: postgres-credentials
          app.kubernetes.io/component: database
          app.kubernetes.io/managed-by: external-secrets-operator
        annotations:
          reloader.stakater.com/match: "true"
      data:
        postgres-password: "{{ .postgresPassword }}"
        datadog-password: "{{ .datadogPassword }}"
  
  data:
  - secretKey: postgresPassword
    remoteRef:
      key: database/postgres
      property: admin-password
  - secretKey: datadogPassword
    remoteRef:
      key: database/postgres
      property: datadog-password

---
# Service Account for External Secrets Operator
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-sa
  namespace: vibecode-dev
  labels:
    app.kubernetes.io/name: external-secrets-sa
    app.kubernetes.io/component: external-secrets
    app.kubernetes.io/part-of: vibecode-platform
  annotations:
    # AWS IAM Role annotation (if using AWS)
    # eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT-ID:role/external-secrets-role
    
    # Azure Workload Identity annotation (if using Azure)
    # azure.workload.identity/client-id: "client-id"
    # azure.workload.identity/tenant-id: "tenant-id"

---
# ClusterSecretStore for cluster-wide secrets (optional)
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: vibecode-cluster-secret-store
  labels:
    app.kubernetes.io/name: vibecode-cluster-secret-store
    app.kubernetes.io/component: external-secrets
    app.kubernetes.io/part-of: vibecode-platform
spec:
  # Similar configuration to SecretStore but cluster-scoped
  # Use for secrets shared across multiple namespaces
  
  # Example AWS configuration for cluster-wide secrets
  # provider:
  #   aws:
  #     service: SecretsManager
  #     region: us-west-2
  #     auth:
  #       serviceAccount:
  #         name: external-secrets-sa
  #         namespace: external-secrets-system

  # For development/testing with local Kubernetes secrets
  provider:
    kubernetes:
      server:
        caProvider:
          type: ConfigMap
          name: kube-root-ca.crt
          key: ca.crt
          namespace: kube-system
      auth:
        serviceAccount:
          name: external-secrets-sa
          namespace: external-secrets-system
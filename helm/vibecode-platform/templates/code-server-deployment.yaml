{{/*
This template creates per-user code-server deployments
It should be used with Helm template functions to generate deployments for each user
*/}}
{{- define "vibecode-platform.codeServerDeployment" }}
{{- $userId := .userId | required "userId is required for code-server deployment" }}
{{- $root := .root }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "vibecode-platform.codeServerName" . }}
  namespace: {{ $root.Values.global.namespace }}
  labels:
    {{- include "vibecode-platform.codeServerLabels" . | nindent 4 }}
  annotations:
    vibecode.dev/user-id: {{ $userId | quote }}
    vibecode.dev/created-at: {{ now | date "2006-01-02T15:04:05Z" | quote }}
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      {{- include "vibecode-platform.codeServerSelectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "vibecode-platform.codeServerLabels" . | nindent 8 }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ $root.Values.monitoring.prometheus.port }}"
        prometheus.io/path: "{{ $root.Values.monitoring.prometheus.path }}"
    spec:
      serviceAccountName: {{ include "vibecode-platform.serviceAccountName" $root }}
      securityContext:
        {{- toYaml $root.Values.codeServer.podSecurityContext | nindent 8 }}
      initContainers:
      - name: setup-user
        image: busybox:1.36
        command: ["/bin/sh"]
        args: ["/scripts/user-setup.sh"]
        securityContext:
          runAsUser: 0
          runAsGroup: 0
          capabilities:
            add:
              - CHOWN
            drop:
              - ALL
        env:
        - name: USER_ID
          value: {{ $userId | quote }}
        - name: USER_NAME
          value: {{ $userId | quote }}
        - name: USER_EMAIL
          value: {{ printf "%s@vibecode.dev" $userId | quote }}
        volumeMounts:
        - name: workspace
          mountPath: /home/coder
        - name: setup-scripts
          mountPath: /scripts
      containers:
      - name: code-server
        image: "{{ $root.Values.codeServer.image.repository }}:{{ $root.Values.codeServer.image.tag }}"
        imagePullPolicy: {{ $root.Values.codeServer.image.pullPolicy }}
        ports:
        - name: http
          containerPort: {{ $root.Values.codeServer.service.targetPort }}
          protocol: TCP
        {{- if $root.Values.monitoring.prometheus.enabled }}
        - name: metrics
          containerPort: {{ $root.Values.monitoring.prometheus.port }}
          protocol: TCP
        {{- end }}
        env:
        - name: USER_ID
          value: {{ $userId | quote }}
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "vibecode-platform.secretName" $root }}
              key: password
        {{- if $root.Values.aiIntegration.openRouter.enabled }}
        - name: OPENROUTER_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ $root.Values.aiIntegration.openRouter.secretName }}
              key: api-key
        {{- end }}
        {{- if $root.Values.aiIntegration.artificialAnalysis.enabled }}
        - name: ARTIFICIAL_ANALYSIS_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ $root.Values.aiIntegration.artificialAnalysis.secretName }}
              key: api-key
        {{- end }}
        {{- with $root.Values.codeServer.env }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /healthz
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /healthz
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 12
        resources:
          {{- toYaml $root.Values.codeServer.resources | nindent 10 }}
        securityContext:
          {{- toYaml $root.Values.codeServer.securityContext | nindent 10 }}
        volumeMounts:
        - name: workspace
          mountPath: /home/coder
        - name: config
          mountPath: /etc/code-server
          readOnly: true
        - name: ai-config
          mountPath: /etc/ai-config
          readOnly: true
        {{- if $root.Values.monitoring.enabled }}
        - name: monitoring-config
          mountPath: /etc/monitoring
          readOnly: true
        {{- end }}
      {{- if $root.Values.aiIntegration.mcp.enabled }}
      - name: mcp-server
        image: node:20-alpine
        command: ["/bin/sh"]
        args: ["-c", "npm install -g @modelcontextprotocol/server && mcp-server start --port {{ $root.Values.aiIntegration.mcp.serverPort }}"]
        ports:
        - name: mcp
          containerPort: {{ $root.Values.aiIntegration.mcp.serverPort }}
          protocol: TCP
        env:
        - name: USER_ID
          value: {{ $userId | quote }}
        - name: WORKSPACE_PATH
          value: "/home/coder/workspace"
        securityContext:
          {{- toYaml $root.Values.codeServer.securityContext | nindent 10 }}
        volumeMounts:
        - name: workspace
          mountPath: /home/coder
          readOnly: true
        - name: ai-config
          mountPath: /etc/ai-config
          readOnly: true
      {{- end }}
      volumes:
      - name: workspace
        persistentVolumeClaim:
          claimName: {{ include "vibecode-platform.pvcName" . }}
      - name: config
        configMap:
          name: {{ include "vibecode-platform.configMapName" $root }}
          items:
          - key: code-server-config
            path: config.yaml
      - name: ai-config
        configMap:
          name: {{ include "vibecode-platform.configMapName" $root }}
          items:
          - key: ai-config.json
            path: config.json
      - name: setup-scripts
        configMap:
          name: {{ include "vibecode-platform.configMapName" $root }}
          items:
          - key: user-setup.sh
            path: user-setup.sh
            mode: 0755
      {{- if $root.Values.monitoring.enabled }}
      - name: monitoring-config
        configMap:
          name: {{ include "vibecode-platform.configMapName" $root }}
          items:
          - key: monitoring-config.yaml
            path: config.yaml
      {{- end }}
      {{- with $root.Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $root.Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $root.Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}

{{/*
Example usage - this would typically be called from a job or external controller
For demonstration, here's how you would create a deployment for a specific user:
*/}}
{{- if .Values.examples.createSampleUser }}
{{- $context := dict "userId" "sample-user" "root" . }}
{{ include "vibecode-platform.codeServerDeployment" $context }}
{{- end }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "vibecode-platform.configMapName" . }}
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "vibecode-platform.labels" . | nindent 4 }}
data:
  # Code-server configuration
  code-server-config: |
    bind-addr: 0.0.0.0:8080
    auth: password
    cert: false
    disable-telemetry: true
    disable-update-check: true
    disable-file-downloads: false
    disable-folder-downloads: false

  # User setup script
  user-setup.sh: |
    #!/bin/bash
    set -euo pipefail

    # Create user home directory if it doesn't exist
    if [ ! -d "/home/coder" ]; then
      mkdir -p /home/coder
      chown -R coder:coder /home/coder
    fi

    # Set up default workspace directory
    if [ ! -d "/home/coder/workspace" ]; then
      mkdir -p /home/coder/workspace
      chown -R coder:coder /home/coder/workspace
    fi

    # Initialize git configuration if not present
    if [ ! -f "/home/coder/.gitconfig" ]; then
      cat > /home/coder/.gitconfig << EOF
    [user]
      name = ${USER_NAME:-"Code User"}
      email = ${USER_EMAIL:-"user@vibecode.dev"}
    [init]
      defaultBranch = main
    [core]
      editor = code --wait
    EOF
      chown coder:coder /home/coder/.gitconfig
    fi

    # Install common code-server extensions
    if [ ! -d "/home/coder/.local/share/code-server/extensions" ]; then
      mkdir -p /home/coder/.local/share/code-server/extensions
      chown -R coder:coder /home/coder/.local/share/code-server
    fi

    echo "User setup completed for ${USER_ID:-unknown}"

  # AI integration configuration
  ai-config.json: |
    {
      "openRouter": {
        "enabled": {{ .Values.aiIntegration.openRouter.enabled }},
        "apiUrl": "{{ .Values.aiIntegration.openRouter.apiUrl }}",
        "models": [
          "anthropic/claude-3-sonnet",
          "openai/gpt-4-turbo",
          "google/gemini-pro"
        ]
      },
      "mcp": {
        "enabled": {{ .Values.aiIntegration.mcp.enabled }},
        "serverPort": {{ .Values.aiIntegration.mcp.serverPort }},
        "tools": [
          "filesystem",
          "git",
          "terminal",
          "kubernetes"
        ]
      },
      "artificialAnalysis": {
        "enabled": {{ .Values.aiIntegration.artificialAnalysis.enabled }},
        "apiUrl": "{{ .Values.aiIntegration.artificialAnalysis.apiUrl }}"
      }
    }

  # Monitoring configuration
  monitoring-config.yaml: |
    monitoring:
      enabled: {{ .Values.monitoring.enabled }}
      prometheus:
        enabled: {{ .Values.monitoring.prometheus.enabled }}
        port: {{ .Values.monitoring.prometheus.port }}
        path: "{{ .Values.monitoring.prometheus.path }}"
      grafana:
        enabled: {{ .Values.monitoring.grafana.enabled }}
      resources:
        enabled: {{ .Values.monitoring.resources.enabled }}
        interval: "{{ .Values.monitoring.resources.interval }}"

  # Security policies
  security-policy.yaml: |
    security:
      podSecurityStandards:
        enforce: "{{ .Values.security.podSecurityStandards.enforce }}"
        audit: "{{ .Values.security.podSecurityStandards.audit }}"
        warn: "{{ .Values.security.podSecurityStandards.warn }}"
      networkPolicies:
        enabled: {{ .Values.security.networkPolicies.enabled }}
      rbac:
        enabled: {{ .Values.security.rbac.enabled }}

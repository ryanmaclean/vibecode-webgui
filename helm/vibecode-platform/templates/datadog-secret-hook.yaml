{{- if .Values.datadog.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "vibecode-platform.fullname" . }}-datadog-secret-setup
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "vibecode-platform.labels" . | nindent 4 }}
    app.kubernetes.io/component: secret-setup
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  ttlSecondsAfterFinished: 300
  template:
    metadata:
      labels:
        {{- include "vibecode-platform.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: secret-setup
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "vibecode-platform.serviceAccountName" . }}-secret-manager
      containers:
      - name: secret-setup
        image: bitnami/kubectl:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: NAMESPACE
          value: {{ .Release.Namespace }}
        - name: DD_API_KEY
          value: {{ .Values.datadog.datadog.apiKey | quote }}
        - name: DATADOG_POSTGRES_PASSWORD
          value: {{ .Values.database.postgresql.auth.datadogPassword | quote }}
        - name: POSTGRES_PASSWORD  
          value: {{ .Values.database.postgresql.auth.postgresPassword | quote }}
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "üîê Setting up Datadog secrets for namespace: $NAMESPACE"
          
          # Create datadog-secrets if it doesn't exist
          if ! kubectl get secret datadog-secrets -n "$NAMESPACE" >/dev/null 2>&1; then
            echo "üìù Creating datadog-secrets..."
            kubectl create secret generic datadog-secrets \
              --from-literal=api-key="$DD_API_KEY" \
              --namespace="$NAMESPACE" \
              --dry-run=client -o yaml | kubectl apply -f -
            kubectl label secret datadog-secrets \
              app.kubernetes.io/managed-by=Helm \
              app.kubernetes.io/instance={{ .Release.Name }} \
              app.kubernetes.io/version={{ .Chart.AppVersion }} \
              --namespace="$NAMESPACE"
            echo "‚úÖ datadog-secrets created successfully"
          else
            echo "‚ÑπÔ∏è  datadog-secrets already exists, updating..."
            kubectl patch secret datadog-secrets \
              --patch="{\"data\":{\"api-key\":\"$(echo -n "$DD_API_KEY" | base64 -w 0)\"}}" \
              --namespace="$NAMESPACE"
            echo "‚úÖ datadog-secrets updated successfully"  
          fi
          
          # Create postgres-credentials if it doesn't exist
          if ! kubectl get secret postgres-credentials -n "$NAMESPACE" >/dev/null 2>&1; then
            echo "üìù Creating postgres-credentials..."
            kubectl create secret generic postgres-credentials \
              --from-literal=postgres-password="$POSTGRES_PASSWORD" \
              --from-literal=datadog-password="$DATADOG_POSTGRES_PASSWORD" \
              --namespace="$NAMESPACE" \
              --dry-run=client -o yaml | kubectl apply -f -
            kubectl label secret postgres-credentials \
              app.kubernetes.io/managed-by=Helm \
              app.kubernetes.io/instance={{ .Release.Name }} \
              app.kubernetes.io/version={{ .Chart.AppVersion }} \
              --namespace="$NAMESPACE"
            echo "‚úÖ postgres-credentials created successfully"
          else
            echo "‚ÑπÔ∏è  postgres-credentials already exists, updating..."
            kubectl patch secret postgres-credentials \
              --patch="{\"data\":{\"postgres-password\":\"$(echo -n "$POSTGRES_PASSWORD" | base64 -w 0)\",\"datadog-password\":\"$(echo -n "$DATADOG_POSTGRES_PASSWORD" | base64 -w 0)\"}}" \
              --namespace="$NAMESPACE"
            echo "‚úÖ postgres-credentials updated successfully"
          fi
          
          echo "üéâ All secrets configured successfully!"
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "vibecode-platform.serviceAccountName" . }}-secret-manager
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "vibecode-platform.labels" . | nindent 4 }}
    app.kubernetes.io/component: secret-setup
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "vibecode-platform.fullname" . }}-secret-manager
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "vibecode-platform.labels" . | nindent 4 }}
    app.kubernetes.io/component: secret-setup
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "vibecode-platform.fullname" . }}-secret-manager
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "vibecode-platform.labels" . | nindent 4 }}
    app.kubernetes.io/component: secret-setup
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation
subjects:
- kind: ServiceAccount
  name: {{ include "vibecode-platform.serviceAccountName" . }}-secret-manager
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: {{ include "vibecode-platform.fullname" . }}-secret-manager
  apiGroup: rbac.authorization.k8s.io
{{- end }}
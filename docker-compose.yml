# VibeCode Platform Docker Compose
# Enhanced with MCP Server support and Docker AI features (July 2025)



services:
  # Documentation Service (Astro + Starlight)
  docs:
    build:
      context: ./docs
      dockerfile: Dockerfile
    container_name: vibecode-docs
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - DD_SERVICE=vibecode-docs
      - DD_ENV=${ENVIRONMENT:-local}
      - DD_VERSION=1.0.0
      - DD_TAGS=env:local,service:vibecode-docs,component:docs
    depends_on:
      - datadog-agent
    networks:
      - vibecode-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.docs.rule=Host(`docs.localhost`)"
      - "traefik.http.services.docs.loadbalancer.server.port=8080"
      # Datadog log processing
      - "com.datadoghq.ad.logs=[{\"source\": \"nginx\", \"service\": \"vibecode-docs\"}]"

  # Main VibeCode Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: vibecode-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://vibecode:password@db:5432/vibecode
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=http://localhost:3000
      
      # Datadog RUM (Real User Monitoring) variables
      - NEXT_PUBLIC_DATADOG_APPLICATION_ID=${NEXT_PUBLIC_DATADOG_APPLICATION_ID}
      - NEXT_PUBLIC_DATADOG_CLIENT_TOKEN=${NEXT_PUBLIC_DATADOG_CLIENT_TOKEN}
      - NEXT_PUBLIC_DATADOG_SITE=${NEXT_PUBLIC_DATADOG_SITE:-datadoghq.com}
      
      # Datadog APM (Application Performance Monitoring)
      - DD_AGENT_HOST=datadog-agent
      - DD_TRACE_AGENT_PORT=8126
      - DD_SERVICE=vibecode-app
      - DD_ENV=${ENVIRONMENT:-local}
      - DD_VERSION=1.0.0
      - DD_PROFILING_ENABLED=true
      - DD_LOGS_INJECTION=true
      - DD_RUNTIME_METRICS_ENABLED=true
      
      # Database monitoring integration
      - DD_DATABASE_MONITORING_ENABLED=true
      - DD_DBM_PROPAGATION_MODE=full
      
      # Tags for better organization
      - DD_TAGS=env:local,service:vibecode-app,component:web
    depends_on:
      - db
      - redis
      - datadog-agent
    networks:
      - vibecode-network
    volumes:
      - ./src:/app/src:ro
      - node_modules:/app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      # Datadog log processing
      - "com.datadoghq.ad.logs=[{\"source\": \"nextjs\", \"service\": \"vibecode-app\"}]"

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: vibecode-db
    environment:
      - POSTGRES_DB=vibecode
      - POSTGRES_USER=vibecode
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - vibecode-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "vibecode"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Session Storage
  redis:
    image: redis:7-alpine
    container_name: vibecode-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - vibecode-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Code Server for Development Environment
  code-server:
    image: codercom/code-server:latest
    container_name: vibecode-code-server
    ports:
      - "8080:8080"
    environment:
      - PASSWORD=vibecode123
    volumes:
      - ./workspaces:/home/coder/workspaces
      - code_server_data:/home/coder/.local/share/code-server
    networks:
      - vibecode-network

  # Docker Model Runner Integration
  ai-model-runner:
    image: nginx:alpine
    container_name: vibecode-model-runner-proxy
    ports:
      - "12434:80"
    environment:
      - MODEL_RUNNER_ENDPOINT=http://model-runner.docker.internal/engines/v1
      - OPENAI_API_BASE=http://model-runner.docker.internal/engines/v1
    volumes:
      - ./docker/model-runner-proxy.conf:/etc/nginx/nginx.conf:ro
    networks:
      - vibecode-network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Server with Model Runner Integration
  mcp-servers:
    build:
      context: .
      dockerfile: ./docker/mcp-servers/Dockerfile
    container_name: vibecode-mcp-servers
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./src:/workspace/src:ro
      - ./public:/workspace/public:ro
      - model-runner-cache:/app/models
    environment:
      - DOCKER_MODEL_RUNNER_URL=http://model-runner.docker.internal/engines/v1
      - MCP_SERVER_PORT=3001
      - WORKSPACE_PATH=/workspace
      - AVAILABLE_MODELS=ai/smollm2:360M-Q4_K_M,ai/llama3.2:1b-Q4_K_M,ai/qwen2.5-coder:1.5b-Q4_K_M
    ports:
      - "3001:3001"
      - "3002:3002"
      - "3003:3003"
    networks:
      - vibecode-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Voice Processing Service  
  voice-processor:
    image: node:20-alpine
    container_name: vibecode-voice-processor
    working_dir: /app
    volumes:
      - ./docker/voice-processor:/app
      - voice-uploads:/app/uploads
    environment:
      - MODEL_RUNNER_URL=http://model-runner.docker.internal/engines/v1
      - SPEECH_MODEL=ai/whisper:base-Q4_K_M
    ports:
      - "3004:3004"
    networks:
      - vibecode-network
    command: >
      sh -c "
        npm install express multer node-fetch cors &&
        node server.js
      "
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Datadog Agent for Local Development
  # Provides dev/stg/prd parity for monitoring
  datadog-agent:
    image: gcr.io/datadoghq/agent:7.66.1
    container_name: vibecode-datadog-agent
    environment:
      - DD_API_KEY=${DATADOG_API_KEY:-dummy-key-for-local-dev}
      - DD_APP_KEY=${DATADOG_APP_KEY:-dummy-app-key-for-local-dev}
      - DD_SITE=${DATADOG_SITE:-datadoghq.com}
      - DD_HOSTNAME=vibecode-docker-compose
      - DD_ENV=${ENVIRONMENT:-local}
      - DD_SERVICE=vibecode-webgui
      - DD_VERSION=1.0.0
      
      # Enable core monitoring features
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_PROCESS_AGENT_ENABLED=true
      - DD_DOCKER_ENABLED=true
      
      # Database monitoring
      - DD_DATABASE_MONITORING_ENABLED=true
      
      # Local development optimizations
      - DD_PROCESS_CONFIG_PROCESS_COLLECTION_ENABLED=true
      - DD_LOG_LEVEL=${DD_LOG_LEVEL:-INFO}
      
      # Container insights
      - DD_CONTAINER_INCLUDE=name:vibecode.*
      - DD_CONTAINER_EXCLUDE=name:datadog.*
      
      # Tags for local environment
      - DD_TAGS=env:local,cluster:docker-compose,project:vibecode
    volumes:
      # Essential Docker socket for container monitoring
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /etc/passwd:/etc/passwd:ro
      
      # APM traces directory
      - datadog-apm:/opt/datadog-agent/run
    ports:
      - "8126:8126"  # APM traces
      - "8125:8125/udp"  # DogStatsD metrics
    networks:
      - vibecode-network
    labels:
      - "com.datadoghq.ad.check_names=[\"docker\"]"
      - "com.datadoghq.ad.init_configs=[{}]"
      - "com.datadoghq.ad.instances=[{\"docker_root\":\"/host\"}]"
    healthcheck:
      test: ["CMD", "agent", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    
    # Monitor services but don't create hard dependencies to avoid cycles
    # depends_on omitted to prevent circular dependencies

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  code_server_data:
    driver: local
  workspaces:
    driver: local
  node_modules:
    driver: local
  git-cache:
    driver: local
  model-cache:
    driver: local
  model-runner-cache:
    driver: local
  voice-uploads:
    driver: local
  datadog-apm:
    driver: local

networks:
  vibecode-network:
    driver: bridge
